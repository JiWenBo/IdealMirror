package com.example.dllo.idealmirror.mirrordao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.dllo.idealmirror.mirrordao.AllMirrorCache;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALL_MIRROR_CACHE".
*/
public class AllMirrorCacheDao extends AbstractDao<AllMirrorCache, Long> {

    public static final String TABLENAME = "ALL_MIRROR_CACHE";

    /**
     * Properties of entity AllMirrorCache.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Imgurl = new Property(1, String.class, "imgurl", false, "IMGURL");
        public final static Property Goodname = new Property(2, String.class, "goodname", false, "GOODNAME");
        public final static Property Productarea = new Property(3, String.class, "productarea", false, "PRODUCTAREA");
        public final static Property Brand = new Property(4, String.class, "brand", false, "BRAND");
        public final static Property Goodprice = new Property(5, String.class, "goodprice", false, "GOODPRICE");
        public final static Property Goodsid = new Property(6, String.class, "goodsid", false, "GOODSID");
    };


    public AllMirrorCacheDao(DaoConfig config) {
        super(config);
    }
    
    public AllMirrorCacheDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALL_MIRROR_CACHE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IMGURL\" TEXT," + // 1: imgurl
                "\"GOODNAME\" TEXT," + // 2: goodname
                "\"PRODUCTAREA\" TEXT," + // 3: productarea
                "\"BRAND\" TEXT," + // 4: brand
                "\"GOODPRICE\" TEXT," + // 5: goodprice
                "\"GOODSID\" TEXT);"); // 6: goodsid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALL_MIRROR_CACHE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AllMirrorCache entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imgurl = entity.getImgurl();
        if (imgurl != null) {
            stmt.bindString(2, imgurl);
        }
 
        String goodname = entity.getGoodname();
        if (goodname != null) {
            stmt.bindString(3, goodname);
        }
 
        String productarea = entity.getProductarea();
        if (productarea != null) {
            stmt.bindString(4, productarea);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(5, brand);
        }
 
        String goodprice = entity.getGoodprice();
        if (goodprice != null) {
            stmt.bindString(6, goodprice);
        }
 
        String goodsid = entity.getGoodsid();
        if (goodsid != null) {
            stmt.bindString(7, goodsid);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AllMirrorCache readEntity(Cursor cursor, int offset) {
        AllMirrorCache entity = new AllMirrorCache( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imgurl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goodname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // productarea
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // brand
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // goodprice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // goodsid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AllMirrorCache entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImgurl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoodname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductarea(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBrand(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGoodprice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGoodsid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AllMirrorCache entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AllMirrorCache entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
