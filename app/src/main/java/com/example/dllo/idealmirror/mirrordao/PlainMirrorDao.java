package com.example.dllo.idealmirror.mirrordao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.dllo.idealmirror.mirrordao.PlainMirror;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAIN_MIRROR".
*/
public class PlainMirrorDao extends AbstractDao<PlainMirror, Long> {

    public static final String TABLENAME = "PLAIN_MIRROR";

    /**
     * Properties of entity PlainMirror.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Goodsimg = new Property(1, String.class, "goodsimg", false, "GOODSIMG");
        public final static Property Goodsname = new Property(2, String.class, "goodsname", false, "GOODSNAME");
        public final static Property Wholestorge = new Property(3, String.class, "wholestorge", false, "WHOLESTORGE");
        public final static Property Product = new Property(4, String.class, "product", false, "PRODUCT");
        public final static Property Goodsprice = new Property(5, String.class, "goodsprice", false, "GOODSPRICE");
        public final static Property Brand = new Property(6, String.class, "brand", false, "BRAND");
        public final static Property Discount = new Property(7, String.class, "discount", false, "DISCOUNT");
    };


    public PlainMirrorDao(DaoConfig config) {
        super(config);
    }
    
    public PlainMirrorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAIN_MIRROR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GOODSIMG\" TEXT," + // 1: goodsimg
                "\"GOODSNAME\" TEXT," + // 2: goodsname
                "\"WHOLESTORGE\" TEXT," + // 3: wholestorge
                "\"PRODUCT\" TEXT," + // 4: product
                "\"GOODSPRICE\" TEXT," + // 5: goodsprice
                "\"BRAND\" TEXT," + // 6: brand
                "\"DISCOUNT\" TEXT);"); // 7: discount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAIN_MIRROR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PlainMirror entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String goodsimg = entity.getGoodsimg();
        if (goodsimg != null) {
            stmt.bindString(2, goodsimg);
        }
 
        String goodsname = entity.getGoodsname();
        if (goodsname != null) {
            stmt.bindString(3, goodsname);
        }
 
        String wholestorge = entity.getWholestorge();
        if (wholestorge != null) {
            stmt.bindString(4, wholestorge);
        }
 
        String product = entity.getProduct();
        if (product != null) {
            stmt.bindString(5, product);
        }
 
        String goodsprice = entity.getGoodsprice();
        if (goodsprice != null) {
            stmt.bindString(6, goodsprice);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(7, brand);
        }
 
        String discount = entity.getDiscount();
        if (discount != null) {
            stmt.bindString(8, discount);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PlainMirror readEntity(Cursor cursor, int offset) {
        PlainMirror entity = new PlainMirror( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // goodsimg
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goodsname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // wholestorge
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // product
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // goodsprice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // brand
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // discount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PlainMirror entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoodsimg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoodsname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWholestorge(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProduct(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGoodsprice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBrand(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDiscount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PlainMirror entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PlainMirror entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
